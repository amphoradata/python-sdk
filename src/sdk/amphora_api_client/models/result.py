# coding: utf-8
"""
    Amphora Data

                 Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com  # noqa: E501

    The version of the OpenAPI document: 0.10.29
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from amphora_api_client.configuration import Configuration


class Result(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'score': 'float',
        'address': 'OneOfAddress',
        'position': 'OneOfPosition',
        'info': 'str'
    }

    attribute_map = {
        'id': 'id',
        'score': 'score',
        'address': 'address',
        'position': 'position',
        'info': 'info'
    }

    def __init__(self,
                 id=None,
                 score=None,
                 address=None,
                 position=None,
                 info=None,
                 local_vars_configuration=None):  # noqa: E501
        """Result - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._score = None
        self._address = None
        self._position = None
        self._info = None
        self.discriminator = None

        self.id = id
        if score is not None:
            self.score = score
        self.address = address
        self.position = position
        self.info = info

    @property
    def id(self):
        """Gets the id of this Result.  # noqa: E501


        :return: The id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.


        :param id: The id of this Result.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def score(self):
        """Gets the score of this Result.  # noqa: E501


        :return: The score of this Result.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Result.


        :param score: The score of this Result.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def address(self):
        """Gets the address of this Result.  # noqa: E501


        :return: The address of this Result.  # noqa: E501
        :rtype: OneOfAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Result.


        :param address: The address of this Result.  # noqa: E501
        :type: OneOfAddress
        """

        self._address = address

    @property
    def position(self):
        """Gets the position of this Result.  # noqa: E501


        :return: The position of this Result.  # noqa: E501
        :rtype: OneOfPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Result.


        :param position: The position of this Result.  # noqa: E501
        :type: OneOfPosition
        """

        self._position = position

    @property
    def info(self):
        """Gets the info of this Result.  # noqa: E501


        :return: The info of this Result.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Result.


        :param info: The info of this Result.  # noqa: E501
        :type: str
        """

        self._info = info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Result):
            return True

        return self.to_dict() != other.to_dict()
