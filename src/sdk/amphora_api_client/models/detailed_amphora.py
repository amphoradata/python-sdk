# coding: utf-8
"""
    Amphora Data

                 Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com  # noqa: E501

    The version of the OpenAPI document: 0.10.29
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from amphora_api_client.configuration import Configuration


class DetailedAmphora(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'terms_of_use_id': 'str',
        'organisation_id': 'str',
        'name': 'str',
        'price': 'float',
        'lat': 'float',
        'lon': 'float',
        'labels': 'str',
        'id': 'str',
        'is_deleted': 'bool',
        'created_date': 'datetime',
        'purchase_count': 'int',
        'signal_count': 'int'
    }

    attribute_map = {
        'description': 'description',
        'terms_of_use_id': 'termsOfUseId',
        'organisation_id': 'organisationId',
        'name': 'name',
        'price': 'price',
        'lat': 'lat',
        'lon': 'lon',
        'labels': 'labels',
        'id': 'id',
        'is_deleted': 'isDeleted',
        'created_date': 'createdDate',
        'purchase_count': 'purchaseCount',
        'signal_count': 'signalCount'
    }

    def __init__(self,
                 description=None,
                 terms_of_use_id=None,
                 organisation_id=None,
                 name=None,
                 price=None,
                 lat=None,
                 lon=None,
                 labels=None,
                 id=None,
                 is_deleted=None,
                 created_date=None,
                 purchase_count=None,
                 signal_count=None,
                 local_vars_configuration=None):  # noqa: E501
        """DetailedAmphora - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._terms_of_use_id = None
        self._organisation_id = None
        self._name = None
        self._price = None
        self._lat = None
        self._lon = None
        self._labels = None
        self._id = None
        self._is_deleted = None
        self._created_date = None
        self._purchase_count = None
        self._signal_count = None
        self.discriminator = None

        self.description = description
        self.terms_of_use_id = terms_of_use_id
        self.organisation_id = organisation_id
        self.name = name
        self.price = price
        self.lat = lat
        self.lon = lon
        self.labels = labels
        self.id = id
        self.is_deleted = is_deleted
        self.created_date = created_date
        self.purchase_count = purchase_count
        self.signal_count = signal_count

    @property
    def description(self):
        """Gets the description of this DetailedAmphora.  # noqa: E501


        :return: The description of this DetailedAmphora.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DetailedAmphora.


        :param description: The description of this DetailedAmphora.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and description is None:  # noqa: E501
            raise ValueError(
                "Invalid value for `description`, must not be `None`"
            )  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and description is not None and len(description) < 1):
            raise ValueError(
                "Invalid value for `description`, length must be greater than or equal to `1`"
            )  # noqa: E501

        self._description = description

    @property
    def terms_of_use_id(self):
        """Gets the terms_of_use_id of this DetailedAmphora.  # noqa: E501


        :return: The terms_of_use_id of this DetailedAmphora.  # noqa: E501
        :rtype: str
        """
        return self._terms_of_use_id

    @terms_of_use_id.setter
    def terms_of_use_id(self, terms_of_use_id):
        """Sets the terms_of_use_id of this DetailedAmphora.


        :param terms_of_use_id: The terms_of_use_id of this DetailedAmphora.  # noqa: E501
        :type: str
        """

        self._terms_of_use_id = terms_of_use_id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this DetailedAmphora.  # noqa: E501

        Gets or sets the owner's organisation Id. Will be set by the server upon creation.  # noqa: E501

        :return: The organisation_id of this DetailedAmphora.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this DetailedAmphora.

        Gets or sets the owner's organisation Id. Will be set by the server upon creation.  # noqa: E501

        :param organisation_id: The organisation_id of this DetailedAmphora.  # noqa: E501
        :type: str
        """

        self._organisation_id = organisation_id

    @property
    def name(self):
        """Gets the name of this DetailedAmphora.  # noqa: E501


        :return: The name of this DetailedAmphora.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DetailedAmphora.


        :param name: The name of this DetailedAmphora.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError(
                "Invalid value for `name`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and name is not None and len(name) > 120):
            raise ValueError(
                "Invalid value for `name`, length must be less than or equal to `120`"
            )  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and name is not None and len(name) < 0):
            raise ValueError(
                "Invalid value for `name`, length must be greater than or equal to `0`"
            )  # noqa: E501

        self._name = name

    @property
    def price(self):
        """Gets the price of this DetailedAmphora.  # noqa: E501


        :return: The price of this DetailedAmphora.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DetailedAmphora.


        :param price: The price of this DetailedAmphora.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price is None:  # noqa: E501
            raise ValueError(
                "Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def lat(self):
        """Gets the lat of this DetailedAmphora.  # noqa: E501


        :return: The lat of this DetailedAmphora.  # noqa: E501
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this DetailedAmphora.


        :param lat: The lat of this DetailedAmphora.  # noqa: E501
        :type: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this DetailedAmphora.  # noqa: E501


        :return: The lon of this DetailedAmphora.  # noqa: E501
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this DetailedAmphora.


        :param lon: The lon of this DetailedAmphora.  # noqa: E501
        :type: float
        """

        self._lon = lon

    @property
    def labels(self):
        """Gets the labels of this DetailedAmphora.  # noqa: E501


        :return: The labels of this DetailedAmphora.  # noqa: E501
        :rtype: str
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this DetailedAmphora.


        :param labels: The labels of this DetailedAmphora.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation
                and labels is not None and not re.search(
                    r'^(([-\w ]{0,12})[, ]?){1,11}$', labels)):  # noqa: E501
            raise ValueError(
                r"Invalid value for `labels`, must be a follow pattern or equal to `/^(([-\w ]{0,12})[, ]?){1,11}$/`"
            )  # noqa: E501

        self._labels = labels

    @property
    def id(self):
        """Gets the id of this DetailedAmphora.  # noqa: E501


        :return: The id of this DetailedAmphora.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DetailedAmphora.


        :param id: The id of this DetailedAmphora.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this DetailedAmphora.  # noqa: E501


        :return: The is_deleted of this DetailedAmphora.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this DetailedAmphora.


        :param is_deleted: The is_deleted of this DetailedAmphora.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def created_date(self):
        """Gets the created_date of this DetailedAmphora.  # noqa: E501


        :return: The created_date of this DetailedAmphora.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DetailedAmphora.


        :param created_date: The created_date of this DetailedAmphora.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def purchase_count(self):
        """Gets the purchase_count of this DetailedAmphora.  # noqa: E501


        :return: The purchase_count of this DetailedAmphora.  # noqa: E501
        :rtype: int
        """
        return self._purchase_count

    @purchase_count.setter
    def purchase_count(self, purchase_count):
        """Sets the purchase_count of this DetailedAmphora.


        :param purchase_count: The purchase_count of this DetailedAmphora.  # noqa: E501
        :type: int
        """

        self._purchase_count = purchase_count

    @property
    def signal_count(self):
        """Gets the signal_count of this DetailedAmphora.  # noqa: E501


        :return: The signal_count of this DetailedAmphora.  # noqa: E501
        :rtype: int
        """
        return self._signal_count

    @signal_count.setter
    def signal_count(self, signal_count):
        """Sets the signal_count of this DetailedAmphora.


        :param signal_count: The signal_count of this DetailedAmphora.  # noqa: E501
        :type: int
        """

        self._signal_count = signal_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailedAmphora):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetailedAmphora):
            return True

        return self.to_dict() != other.to_dict()
