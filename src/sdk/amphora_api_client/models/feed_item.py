# coding: utf-8
"""
    Amphora Data

                 Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com  # noqa: E501

    The version of the OpenAPI document: 0.10.29
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from amphora_api_client.configuration import Configuration


class FeedItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'datetime',
        'subject_type': 'PostSubjectType',
        'event_type': 'PostEventType',
        'subject_id': 'str',
        'text': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'subject_type': 'subjectType',
        'event_type': 'eventType',
        'subject_id': 'subjectId',
        'text': 'text'
    }

    def __init__(self,
                 timestamp=None,
                 subject_type=None,
                 event_type=None,
                 subject_id=None,
                 text=None,
                 local_vars_configuration=None):  # noqa: E501
        """FeedItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._subject_type = None
        self._event_type = None
        self._subject_id = None
        self._text = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if subject_type is not None:
            self.subject_type = subject_type
        if event_type is not None:
            self.event_type = event_type
        self.subject_id = subject_id
        self.text = text

    @property
    def timestamp(self):
        """Gets the timestamp of this FeedItem.  # noqa: E501


        :return: The timestamp of this FeedItem.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this FeedItem.


        :param timestamp: The timestamp of this FeedItem.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def subject_type(self):
        """Gets the subject_type of this FeedItem.  # noqa: E501


        :return: The subject_type of this FeedItem.  # noqa: E501
        :rtype: PostSubjectType
        """
        return self._subject_type

    @subject_type.setter
    def subject_type(self, subject_type):
        """Sets the subject_type of this FeedItem.


        :param subject_type: The subject_type of this FeedItem.  # noqa: E501
        :type: PostSubjectType
        """

        self._subject_type = subject_type

    @property
    def event_type(self):
        """Gets the event_type of this FeedItem.  # noqa: E501


        :return: The event_type of this FeedItem.  # noqa: E501
        :rtype: PostEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this FeedItem.


        :param event_type: The event_type of this FeedItem.  # noqa: E501
        :type: PostEventType
        """

        self._event_type = event_type

    @property
    def subject_id(self):
        """Gets the subject_id of this FeedItem.  # noqa: E501


        :return: The subject_id of this FeedItem.  # noqa: E501
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this FeedItem.


        :param subject_id: The subject_id of this FeedItem.  # noqa: E501
        :type: str
        """

        self._subject_id = subject_id

    @property
    def text(self):
        """Gets the text of this FeedItem.  # noqa: E501


        :return: The text of this FeedItem.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this FeedItem.


        :param text: The text of this FeedItem.  # noqa: E501
        :type: str
        """

        self._text = text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeedItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeedItem):
            return True

        return self.to_dict() != other.to_dict()
