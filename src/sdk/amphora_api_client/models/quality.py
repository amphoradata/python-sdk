# coding: utf-8
"""
    Amphora Data

                 Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com  # noqa: E501

    The version of the OpenAPI document: 0.10.29
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from amphora_api_client.configuration import Configuration


class Quality(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accuracy': 'int',
        'completeness': 'int',
        'granularity': 'int',
        'reliability': 'int'
    }

    attribute_map = {
        'accuracy': 'accuracy',
        'completeness': 'completeness',
        'granularity': 'granularity',
        'reliability': 'reliability'
    }

    def __init__(self,
                 accuracy=None,
                 completeness=None,
                 granularity=None,
                 reliability=None,
                 local_vars_configuration=None):  # noqa: E501
        """Quality - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accuracy = None
        self._completeness = None
        self._granularity = None
        self._reliability = None
        self.discriminator = None

        self.accuracy = accuracy
        self.completeness = completeness
        self.granularity = granularity
        self.reliability = reliability

    @property
    def accuracy(self):
        """Gets the accuracy of this Quality.  # noqa: E501


        :return: The accuracy of this Quality.  # noqa: E501
        :rtype: int
        """
        return self._accuracy

    @accuracy.setter
    def accuracy(self, accuracy):
        """Sets the accuracy of this Quality.


        :param accuracy: The accuracy of this Quality.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation
                and accuracy is not None and accuracy > 4):  # noqa: E501
            raise ValueError(
                "Invalid value for `accuracy`, must be a value less than or equal to `4`"
            )  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and accuracy is not None and accuracy < 1):  # noqa: E501
            raise ValueError(
                "Invalid value for `accuracy`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._accuracy = accuracy

    @property
    def completeness(self):
        """Gets the completeness of this Quality.  # noqa: E501


        :return: The completeness of this Quality.  # noqa: E501
        :rtype: int
        """
        return self._completeness

    @completeness.setter
    def completeness(self, completeness):
        """Sets the completeness of this Quality.


        :param completeness: The completeness of this Quality.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation
                and completeness is not None
                and completeness > 4):  # noqa: E501
            raise ValueError(
                "Invalid value for `completeness`, must be a value less than or equal to `4`"
            )  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and completeness is not None
                and completeness < 1):  # noqa: E501
            raise ValueError(
                "Invalid value for `completeness`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._completeness = completeness

    @property
    def granularity(self):
        """Gets the granularity of this Quality.  # noqa: E501


        :return: The granularity of this Quality.  # noqa: E501
        :rtype: int
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this Quality.


        :param granularity: The granularity of this Quality.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation
                and granularity is not None and granularity > 4):  # noqa: E501
            raise ValueError(
                "Invalid value for `granularity`, must be a value less than or equal to `4`"
            )  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and granularity is not None and granularity < 1):  # noqa: E501
            raise ValueError(
                "Invalid value for `granularity`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._granularity = granularity

    @property
    def reliability(self):
        """Gets the reliability of this Quality.  # noqa: E501


        :return: The reliability of this Quality.  # noqa: E501
        :rtype: int
        """
        return self._reliability

    @reliability.setter
    def reliability(self, reliability):
        """Sets the reliability of this Quality.


        :param reliability: The reliability of this Quality.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation
                and reliability is not None and reliability > 4):  # noqa: E501
            raise ValueError(
                "Invalid value for `reliability`, must be a value less than or equal to `4`"
            )  # noqa: E501
        if (self.local_vars_configuration.client_side_validation
                and reliability is not None and reliability < 1):  # noqa: E501
            raise ValueError(
                "Invalid value for `reliability`, must be a value greater than or equal to `1`"
            )  # noqa: E501

        self._reliability = reliability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Quality):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Quality):
            return True

        return self.to_dict() != other.to_dict()
