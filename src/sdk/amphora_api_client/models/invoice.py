# coding: utf-8
"""
    Amphora Data

                 Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com  # noqa: E501

    The version of the OpenAPI document: 0.10.29
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from amphora_api_client.configuration import Configuration


class Invoice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'organisation_id': 'str',
        'name': 'str',
        'is_paid': 'bool',
        'date_created': 'datetime',
        'timestamp': 'datetime',
        'opening_balance': 'float',
        'invoice_balance': 'float',
        'transactions': 'list[Transaction]'
    }

    attribute_map = {
        'id': 'id',
        'organisation_id': 'organisationId',
        'name': 'name',
        'is_paid': 'isPaid',
        'date_created': 'dateCreated',
        'timestamp': 'timestamp',
        'opening_balance': 'openingBalance',
        'invoice_balance': 'invoiceBalance',
        'transactions': 'transactions'
    }

    def __init__(self,
                 id=None,
                 organisation_id=None,
                 name=None,
                 is_paid=None,
                 date_created=None,
                 timestamp=None,
                 opening_balance=None,
                 invoice_balance=None,
                 transactions=None,
                 local_vars_configuration=None):  # noqa: E501
        """Invoice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._organisation_id = None
        self._name = None
        self._is_paid = None
        self._date_created = None
        self._timestamp = None
        self._opening_balance = None
        self._invoice_balance = None
        self._transactions = None
        self.discriminator = None

        self.id = id
        self.organisation_id = organisation_id
        self.name = name
        self.is_paid = is_paid
        self.date_created = date_created
        self.timestamp = timestamp
        if opening_balance is not None:
            self.opening_balance = opening_balance
        if invoice_balance is not None:
            self.invoice_balance = invoice_balance
        self.transactions = transactions

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501


        :return: The id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.


        :param id: The id of this Invoice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def organisation_id(self):
        """Gets the organisation_id of this Invoice.  # noqa: E501


        :return: The organisation_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._organisation_id

    @organisation_id.setter
    def organisation_id(self, organisation_id):
        """Sets the organisation_id of this Invoice.


        :param organisation_id: The organisation_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._organisation_id = organisation_id

    @property
    def name(self):
        """Gets the name of this Invoice.  # noqa: E501


        :return: The name of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Invoice.


        :param name: The name of this Invoice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_paid(self):
        """Gets the is_paid of this Invoice.  # noqa: E501


        :return: The is_paid of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._is_paid

    @is_paid.setter
    def is_paid(self, is_paid):
        """Sets the is_paid of this Invoice.


        :param is_paid: The is_paid of this Invoice.  # noqa: E501
        :type: bool
        """

        self._is_paid = is_paid

    @property
    def date_created(self):
        """Gets the date_created of this Invoice.  # noqa: E501


        :return: The date_created of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Invoice.


        :param date_created: The date_created of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def timestamp(self):
        """Gets the timestamp of this Invoice.  # noqa: E501


        :return: The timestamp of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Invoice.


        :param timestamp: The timestamp of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def opening_balance(self):
        """Gets the opening_balance of this Invoice.  # noqa: E501


        :return: The opening_balance of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._opening_balance

    @opening_balance.setter
    def opening_balance(self, opening_balance):
        """Sets the opening_balance of this Invoice.


        :param opening_balance: The opening_balance of this Invoice.  # noqa: E501
        :type: float
        """

        self._opening_balance = opening_balance

    @property
    def invoice_balance(self):
        """Gets the invoice_balance of this Invoice.  # noqa: E501


        :return: The invoice_balance of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._invoice_balance

    @invoice_balance.setter
    def invoice_balance(self, invoice_balance):
        """Sets the invoice_balance of this Invoice.


        :param invoice_balance: The invoice_balance of this Invoice.  # noqa: E501
        :type: float
        """

        self._invoice_balance = invoice_balance

    @property
    def transactions(self):
        """Gets the transactions of this Invoice.  # noqa: E501


        :return: The transactions of this Invoice.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Invoice.


        :param transactions: The transactions of this Invoice.  # noqa: E501
        :type: list[Transaction]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Invoice):
            return True

        return self.to_dict() != other.to_dict()
