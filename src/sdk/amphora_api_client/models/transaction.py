# coding: utf-8
"""
    Amphora Data

                 Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com  # noqa: E501

    The version of the OpenAPI document: 0.10.29
    Generated by: https://openapi-generator.tech
"""

import pprint
import re  # noqa: F401

import six

from amphora_api_client.configuration import Configuration


class Transaction(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'amphora_id': 'str',
        'balance': 'float',
        'amount': 'float',
        'timestamp': 'datetime',
        'label': 'str'
    }

    attribute_map = {
        'id': 'id',
        'amphora_id': 'amphoraId',
        'balance': 'balance',
        'amount': 'amount',
        'timestamp': 'timestamp',
        'label': 'label'
    }

    def __init__(self,
                 id=None,
                 amphora_id=None,
                 balance=None,
                 amount=None,
                 timestamp=None,
                 label=None,
                 local_vars_configuration=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._amphora_id = None
        self._balance = None
        self._amount = None
        self._timestamp = None
        self._label = None
        self.discriminator = None

        self.id = id
        self.amphora_id = amphora_id
        if balance is not None:
            self.balance = balance
        if amount is not None:
            self.amount = amount
        self.timestamp = timestamp
        self.label = label

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501


        :return: The id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.


        :param id: The id of this Transaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def amphora_id(self):
        """Gets the amphora_id of this Transaction.  # noqa: E501


        :return: The amphora_id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._amphora_id

    @amphora_id.setter
    def amphora_id(self, amphora_id):
        """Sets the amphora_id of this Transaction.


        :param amphora_id: The amphora_id of this Transaction.  # noqa: E501
        :type: str
        """

        self._amphora_id = amphora_id

    @property
    def balance(self):
        """Gets the balance of this Transaction.  # noqa: E501


        :return: The balance of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Transaction.


        :param balance: The balance of this Transaction.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501


        :return: The amount of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.


        :param amount: The amount of this Transaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def timestamp(self):
        """Gets the timestamp of this Transaction.  # noqa: E501


        :return: The timestamp of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Transaction.


        :param timestamp: The timestamp of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def label(self):
        """Gets the label of this Transaction.  # noqa: E501


        :return: The label of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Transaction.


        :param label: The label of this Transaction.  # noqa: E501
        :type: str
        """

        self._label = label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict()
                        if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Transaction):
            return True

        return self.to_dict() != other.to_dict()
