# coding: utf-8
"""
    Amphora Data

                 Connect information in real time with Amphora Data.                          Learn more at https://docs.amphoradata.com  # noqa: E501

    The version of the OpenAPI document: 0.10.29
    Generated by: https://openapi-generator.tech
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from amphora_api_client.api_client import ApiClient
from amphora_api_client.exceptions import (ApiTypeError, ApiValueError)


class SearchApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_search_amphora(self, **kwargs):  # noqa: E501
        """Searches for Amphorae.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_search_amphora(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str term: Gets or sets the free text search term.
        :param str labels: Gets or sets the comma separated labels that must be included in results.
        :param str org_id: Gets or sets the Organisation ID for the Amphora.
        :param float lat: Gets or sets the latitude (center of search area).
        :param float lon: Gets or sets the longitude (center of search area).
        :param float dist: Gets or sets the distance from center of search area (describing a circle).
        :param int take: Gets or sets how many items to return. Defaults to 64.
        :param int skip: Gets or sets how many items to skip before returning. Defaults to 0.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchResponseOfBasicAmphora
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_search_amphora_with_http_info(**
                                                         kwargs)  # noqa: E501

    def search_search_amphora_with_http_info(self, **kwargs):  # noqa: E501
        """Searches for Amphorae.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_search_amphora_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str term: Gets or sets the free text search term.
        :param str labels: Gets or sets the comma separated labels that must be included in results.
        :param str org_id: Gets or sets the Organisation ID for the Amphora.
        :param float lat: Gets or sets the latitude (center of search area).
        :param float lon: Gets or sets the longitude (center of search area).
        :param float dist: Gets or sets the distance from center of search area (describing a circle).
        :param int take: Gets or sets how many items to return. Defaults to 64.
        :param int skip: Gets or sets how many items to skip before returning. Defaults to 0.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchResponseOfBasicAmphora, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'term', 'labels', 'org_id', 'lat', 'lon', 'dist', 'take', 'skip'
        ]  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method search_search_amphora" % key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'take' in local_var_params and local_var_params[
                'take'] > 256:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `take` when calling `search_search_amphora`, must be a value less than or equal to `256`"
            )  # noqa: E501
        if self.api_client.client_side_validation and 'take' in local_var_params and local_var_params[
                'take'] < 1:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `take` when calling `search_search_amphora`, must be a value greater than or equal to `1`"
            )  # noqa: E501
        if self.api_client.client_side_validation and 'skip' in local_var_params and local_var_params[
                'skip'] > 2147483647:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `skip` when calling `search_search_amphora`, must be a value less than or equal to `2147483647`"
            )  # noqa: E501
        if self.api_client.client_side_validation and 'skip' in local_var_params and local_var_params[
                'skip'] < 0:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `skip` when calling `search_search_amphora`, must be a value greater than or equal to `0`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'term' in local_var_params and local_var_params[
                'term'] is not None:  # noqa: E501
            query_params.append(
                ('Term', local_var_params['term']))  # noqa: E501
        if 'labels' in local_var_params and local_var_params[
                'labels'] is not None:  # noqa: E501
            query_params.append(
                ('Labels', local_var_params['labels']))  # noqa: E501
        if 'org_id' in local_var_params and local_var_params[
                'org_id'] is not None:  # noqa: E501
            query_params.append(
                ('OrgId', local_var_params['org_id']))  # noqa: E501
        if 'lat' in local_var_params and local_var_params[
                'lat'] is not None:  # noqa: E501
            query_params.append(('Lat', local_var_params['lat']))  # noqa: E501
        if 'lon' in local_var_params and local_var_params[
                'lon'] is not None:  # noqa: E501
            query_params.append(('Lon', local_var_params['lon']))  # noqa: E501
        if 'dist' in local_var_params and local_var_params[
                'dist'] is not None:  # noqa: E501
            query_params.append(
                ('Dist', local_var_params['dist']))  # noqa: E501
        if 'take' in local_var_params and local_var_params[
                'take'] is not None:  # noqa: E501
            query_params.append(
                ('Take', local_var_params['take']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('Skip', local_var_params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/search-v2/amphorae',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResponseOfBasicAmphora',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_search_organisations(self, **kwargs):  # noqa: E501
        """Searches for Organisations with fuzzy search.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_search_organisations(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str term: Gets or sets the free text search term.
        :param int take: Gets or sets how many items to return. Defaults to 64.
        :param int skip: Gets or sets how many items to skip before returning. Defaults to 0.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SearchResponseOfOrganisation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.search_search_organisations_with_http_info(
            **kwargs)  # noqa: E501

    def search_search_organisations_with_http_info(self,
                                                   **kwargs):  # noqa: E501
        """Searches for Organisations with fuzzy search.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_search_organisations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str term: Gets or sets the free text search term.
        :param int take: Gets or sets how many items to return. Defaults to 64.
        :param int skip: Gets or sets how many items to skip before returning. Defaults to 0.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SearchResponseOfOrganisation, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['term', 'take', 'skip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError("Got an unexpected keyword argument '%s'"
                                   " to method search_search_organisations" %
                                   key)
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and 'take' in local_var_params and local_var_params[
                'take'] > 256:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `take` when calling `search_search_organisations`, must be a value less than or equal to `256`"
            )  # noqa: E501
        if self.api_client.client_side_validation and 'take' in local_var_params and local_var_params[
                'take'] < 1:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `take` when calling `search_search_organisations`, must be a value greater than or equal to `1`"
            )  # noqa: E501
        if self.api_client.client_side_validation and 'skip' in local_var_params and local_var_params[
                'skip'] > 2147483647:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `skip` when calling `search_search_organisations`, must be a value less than or equal to `2147483647`"
            )  # noqa: E501
        if self.api_client.client_side_validation and 'skip' in local_var_params and local_var_params[
                'skip'] < 0:  # noqa: E501
            raise ApiValueError(
                "Invalid value for parameter `skip` when calling `search_search_organisations`, must be a value greater than or equal to `0`"
            )  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'term' in local_var_params and local_var_params[
                'term'] is not None:  # noqa: E501
            query_params.append(
                ('Term', local_var_params['term']))  # noqa: E501
        if 'take' in local_var_params and local_var_params[
                'take'] is not None:  # noqa: E501
            query_params.append(
                ('Take', local_var_params['take']))  # noqa: E501
        if 'skip' in local_var_params and local_var_params[
                'skip'] is not None:  # noqa: E501
            query_params.append(
                ('Skip', local_var_params['skip']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/search-v2/organisations',
            'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchResponseOfOrganisation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get(
                '_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
