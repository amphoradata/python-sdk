# coding: utf-8

"""
    Amphora Data Api

    API for interacting with the Amphora Data platform.  # noqa: E501

    The version of the OpenAPI document: 0.0.2
    Contact: rian@amphoradata.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Result(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'id': 'str',
        'score': 'float',
        'address': 'Address',
        'position': 'Position',
        'viewport': 'Viewport',
        'entry_points': 'list[EntryPoint]',
        'info': 'str',
        'poi': 'Poi'
    }

    attribute_map = {
        'type': 'type',
        'id': 'id',
        'score': 'score',
        'address': 'address',
        'position': 'position',
        'viewport': 'viewport',
        'entry_points': 'entryPoints',
        'info': 'info',
        'poi': 'poi'
    }

    def __init__(self, type=None, id=None, score=None, address=None, position=None, viewport=None, entry_points=None, info=None, poi=None):  # noqa: E501
        """Result - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._id = None
        self._score = None
        self._address = None
        self._position = None
        self._viewport = None
        self._entry_points = None
        self._info = None
        self._poi = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if score is not None:
            self.score = score
        if address is not None:
            self.address = address
        if position is not None:
            self.position = position
        if viewport is not None:
            self.viewport = viewport
        if entry_points is not None:
            self.entry_points = entry_points
        if info is not None:
            self.info = info
        if poi is not None:
            self.poi = poi

    @property
    def type(self):
        """Gets the type of this Result.  # noqa: E501


        :return: The type of this Result.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Result.


        :param type: The type of this Result.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this Result.  # noqa: E501


        :return: The id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.


        :param id: The id of this Result.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def score(self):
        """Gets the score of this Result.  # noqa: E501


        :return: The score of this Result.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Result.


        :param score: The score of this Result.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def address(self):
        """Gets the address of this Result.  # noqa: E501


        :return: The address of this Result.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Result.


        :param address: The address of this Result.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def position(self):
        """Gets the position of this Result.  # noqa: E501


        :return: The position of this Result.  # noqa: E501
        :rtype: Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Result.


        :param position: The position of this Result.  # noqa: E501
        :type: Position
        """

        self._position = position

    @property
    def viewport(self):
        """Gets the viewport of this Result.  # noqa: E501


        :return: The viewport of this Result.  # noqa: E501
        :rtype: Viewport
        """
        return self._viewport

    @viewport.setter
    def viewport(self, viewport):
        """Sets the viewport of this Result.


        :param viewport: The viewport of this Result.  # noqa: E501
        :type: Viewport
        """

        self._viewport = viewport

    @property
    def entry_points(self):
        """Gets the entry_points of this Result.  # noqa: E501


        :return: The entry_points of this Result.  # noqa: E501
        :rtype: list[EntryPoint]
        """
        return self._entry_points

    @entry_points.setter
    def entry_points(self, entry_points):
        """Sets the entry_points of this Result.


        :param entry_points: The entry_points of this Result.  # noqa: E501
        :type: list[EntryPoint]
        """

        self._entry_points = entry_points

    @property
    def info(self):
        """Gets the info of this Result.  # noqa: E501


        :return: The info of this Result.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Result.


        :param info: The info of this Result.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def poi(self):
        """Gets the poi of this Result.  # noqa: E501


        :return: The poi of this Result.  # noqa: E501
        :rtype: Poi
        """
        return self._poi

    @poi.setter
    def poi(self, poi):
        """Sets the poi of this Result.


        :param poi: The poi of this Result.  # noqa: E501
        :type: Poi
        """

        self._poi = poi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
